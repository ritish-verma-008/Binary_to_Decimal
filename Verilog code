module bin_to_dec(bin, D1_AN,D0_AN ,seg_one,seg_ten);
    input [4:0] bin;
    output reg [3:0] D1_AN;
    output reg [3:0] D0_AN;
    output reg [6:0] seg_one;
    output reg [6:0] seg_ten;   
 reg [4:0] d[1:0]; 
    always @(*) begin
        if (bin >= 5'd10) begin
            d[1] = 5'd1;
            d[0] = bin - 5'd10;
        end else begin
            d[1] = 5'd0;
            d[0] = bin;
        end
    end
    always @(*) begin
        D1_AN = 4'b1110;  
        case (d[0])
            5'd0: seg_one = 7'b1000000;
            5'd1: seg_one = 7'b1111001;
            5'd2: seg_one = 7'b0100100;
            5'd3: seg_one = 7'b0110000;
            5'd4: seg_one = 7'b0011001;
            5'd5: seg_one = 7'b0010010;
            5'd6: seg_one = 7'b0000010;
            5'd7: seg_one = 7'b1111000;
            5'd8: seg_one = 7'b0000000;
            5'd9: seg_one= 7'b0010000;
            default: seg_one = 7'b1111111; 
        endcase
    end   
    always @(*) begin
        D0_AN = 4'b1110;  
        case (d[1])
            5'd0: seg_ten = 7'b1000000;
            5'd1: seg_ten = 7'b1111001;
            5'd2: seg_ten = 7'b0100100;
            5'd3: seg_ten = 7'b0110000;
            5'd4: seg_ten = 7'b0011001;
            5'd5: seg_ten = 7'b0010010;
            5'd6: seg_ten = 7'b0000010;
            5'd7: seg_ten = 7'b1111000;
            5'd8: seg_ten = 7'b0000000;
            5'd9: seg_ten = 7'b0010000;
            default: seg_ten = 7'b1111111;
        endcase
    end
endmodule

